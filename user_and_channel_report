#! /usr/bin/env python3

import json
import sys

import config
import slacker
import slack_token
import slack_user_report
import slack_channel_report
import report_generator
import report_targets

fake = False
rg = report_generator.ReportGenerator(fake=fake)
slack_user_reporter = slack_user_report.SlackUserReport()
slack_channel_reporter = slack_channel_report.SlackChannelReport()

users = report_targets.users()
channel_dict = report_targets.channels()
channels = channel_dict.keys()

last_week = rg.latest_week_start()
days = 7

force_regen = False
if len(sys.argv) > 1 and sys.argv[1] == "regen":
    force_regen = True

print("users: {}".format(users))
print("channels: {}".format(channels))
print("Week start: {}".format(last_week))
print("Getting report for {}/{}".format(last_week, days))
(report, previous_report) = rg.report(last_week, days, users=users, channels=channels, force_generate=force_regen)
f = open("reports/{}-{}days-report.json".format(last_week, days), "w")
f.write(json.dumps(report, indent=4))
f.close()
for user in users:
    # slack_user_reporter.send_report(user, report, previous_report, send=True, override_uid=roy)
    slack_user_reporter.send_report(user, report, previous_report, send=True)
    pass

for channel in channels:
    dest = channel_dict[channel]
    slack_channel_reporter.send_report(channel, report, previous_report, send=True, override_uid=dest, summary=True)
